{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/toolbar\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/sidenav\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/list\";\n\nfunction MenuComponent_button_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function MenuComponent_button_17_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      i0.ɵɵnextContext();\n\n      const _r0 = i0.ɵɵreference(2);\n\n      return i0.ɵɵresetView(_r0.toggle());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 7);\n    i0.ɵɵtext(2, \"menu\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst _c0 = [\"*\"];\nexport class MenuComponent {\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n\n}\n\nMenuComponent.ɵfac = function MenuComponent_Factory(t) {\n  return new (t || MenuComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n};\n\nMenuComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MenuComponent,\n  selectors: [[\"app-menu\"]],\n  ngContentSelectors: _c0,\n  decls: 22,\n  vars: 12,\n  consts: [[1, \"sidenav-container\"], [\"fixedInViewport\", \"\", 1, \"sidenav\", 3, \"mode\", \"opened\"], [\"drawer\", \"\"], [\"mat-list-item\", \"\", \"href\", \"#\"], [\"color\", \"primary\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\"], [\"aria-label\", \"Side nav toggle icon\"]],\n  template: function MenuComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0)(1, \"mat-sidenav\", 1, 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementStart(6, \"mat-toolbar\");\n      i0.ɵɵtext(7, \"Menu\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-nav-list\")(9, \"a\", 3);\n      i0.ɵɵtext(10, \"Bontique\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"a\", 3);\n      i0.ɵɵtext(12, \"Mon pa\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"a\", 3);\n      i0.ɵɵtext(14, \"Link 3\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"mat-sidenav-content\")(16, \"mat-toolbar\", 4);\n      i0.ɵɵtemplate(17, MenuComponent_button_17_Template, 3, 0, \"button\", 5);\n      i0.ɵɵpipe(18, \"async\");\n      i0.ɵɵelementStart(19, \"span\");\n      i0.ɵɵtext(20, \"angular-tp\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵprojection(21);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"mode\", i0.ɵɵpipeBind1(4, 6, ctx.isHandset$) ? \"over\" : \"side\")(\"opened\", i0.ɵɵpipeBind1(5, 8, ctx.isHandset$) === false);\n      i0.ɵɵattribute(\"role\", i0.ɵɵpipeBind1(3, 4, ctx.isHandset$) ? \"dialog\" : \"navigation\");\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(18, 10, ctx.isHandset$));\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatToolbar, i4.MatButton, i5.MatSidenav, i5.MatSidenavContainer, i5.MatSidenavContent, i6.MatIcon, i7.MatNavList, i7.MatListItem, i2.AsyncPipe],\n  styles: [\".sidenav-container[_ngcontent-%COMP%] {\\n  height: 100%;\\n}\\n\\n.sidenav[_ngcontent-%COMP%] {\\n  width: 200px;\\n}\\n\\n.sidenav[_ngcontent-%COMP%]   .mat-toolbar[_ngcontent-%COMP%] {\\n  background: inherit;\\n}\\n\\n.mat-toolbar.mat-primary[_ngcontent-%COMP%] {\\n  position: sticky;\\n  top: 0;\\n  z-index: 1;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixNQUFNO0VBQ04sVUFBVTtBQUNaIiwiZmlsZSI6Im1lbnUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaWRlbmF2LWNvbnRhaW5lciB7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLnNpZGVuYXYge1xuICB3aWR0aDogMjAwcHg7XG59XG5cbi5zaWRlbmF2IC5tYXQtdG9vbGJhciB7XG4gIGJhY2tncm91bmQ6IGluaGVyaXQ7XG59XG5cbi5tYXQtdG9vbGJhci5tYXQtcHJpbWFyeSB7XG4gIHBvc2l0aW9uOiBzdGlja3k7XG4gIHRvcDogMDtcbiAgei1pbmRleDogMTtcbn1cbiJdfQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAA6BA,WAA7B,QAAgD,qBAAhD;AAEA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;;;;;;;;;;;;;;ICWMC;IAIEA;MAAAA;MAAAA;;MAAA;;MAAA,OAASA,4BAAT;IAAwB,CAAxB;IAEAA;IAA4CA;IAAIA;;;;;ADVxD,OAAM,MAAOC,aAAP,CAAoB;EAQxBC,YAAoBC,kBAApB,EAA0D;IAAtC;IANpB,kBAAkC,KAAKA,kBAAL,CAAwBC,OAAxB,CAAgCP,WAAW,CAACQ,OAA5C,EAC/BC,IAD+B,CAE9BR,GAAG,CAACS,MAAM,IAAIA,MAAM,CAACC,OAAlB,CAF2B,EAG9BT,WAAW,EAHmB,CAAlC;EAM8D;;AARtC;;;mBAAbE,eAAaD;AAAA;;;QAAbC;EAAaQ;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCV1Bd,iDAAiD,CAAjD,EAAiD,aAAjD,EAAiD,CAAjD,EAAiD,CAAjD;;;;MAKIA;MAAaA;MAAIA;MACjBA,qCAAc,CAAd,EAAc,GAAd,EAAc,CAAd;MAC4BA;MAAQA;MAClCA;MAA0BA;MAAMA;MAChCA;MAA0BA;MAAMA;MAGpCA,6CAAqB,EAArB,EAAqB,aAArB,EAAqB,CAArB;MAEIA;;MAQAA;MAAMA;MAAUA;MAElBA;MACFA;;;;MAtBIA;MAAAA,8EAA+C,QAA/C,EAA+CA,8CAA/C;MADAA;MAiBGA;MAAAA","names":["Breakpoints","map","shareReplay","i0","MenuComponent","constructor","breakpointObserver","observe","Handset","pipe","result","matches","selectors","ngContentSelectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/patou/projets/angular-tp/src/app/menu/menu.component.ts","/Users/patou/projets/angular-tp/src/app/menu/menu.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item href=\"#\">Bontique</a>\n      <a mat-list-item href=\"#\">Mon pa</a>\n      <a mat-list-item href=\"#\">Link 3</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>angular-tp</span>\n    </mat-toolbar>\n    <ng-content></ng-content>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"]},"metadata":{},"sourceType":"module"}